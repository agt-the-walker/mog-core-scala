package com.mogproject.mogami.core.state

import com.mogproject.mogami._
import com.mogproject.mogami.core.state.State.EMPTY_HANDS
import com.mogproject.mogami.core.{Hand, Piece, Square}

/**
  * Constant state definitions
  *
  * Set StateHint to improve performance in initialization.
  *
  * @see https://en.wikipedia.org/wiki/Handicap_(shogi)
  */
object StateConstant {

  // For creating StateHint string
  /*
  def state2HintString(state: State): String = {
    def l2s(l: Long): String = f"0x${l}%xL"

    def bb2s(bb: BitBoard): String = Seq(bb.lo, bb.hi).map(l2s).mkString("BitBoard(", ", ", ")")

    def v2s(v: Vector[BitBoard]): String = v.map(bb2s).mkString("Vector(", ", ", ")")

    val h = l2s(state.hash)
    val oa = bb2s(state.occupancyAll)
    val oo = v2s(state.occupancyByOwner)
    val op = v2s(state.occupancyByPiece)
    val u = state.unusedPtypeCount
    val abb = state.attackBBOnBoard.map { case (k, v) => k -> v.map { case (kk, vv) => kk -> bb2s(vv) }.toMap }.toMap

    s"Some(StateHint(${h}, ${oa}, ${oo}, ${op}, ${u}, ${abb}))"
  }
  */

  lazy val HIRATE = State(BLACK, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    Square(2, 2) -> Piece(WHITE, BISHOP),
    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0x864f160bc5a71f7L, BitBoard(0x7fd05ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fd05ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L),BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x101L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x400L, 0x0L), BitBoard(0x10000L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(10) -> BitBoard(0x140005L, 0x0L), Square(0) -> BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L,0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(16) -> BitBoard(0x202fc80L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val MATING_BLACK = State(BLACK, Map(
    Square(5, 1) -> Piece(WHITE, KING)
  ), EMPTY_HANDS ++ Map(
    Hand(WHITE, ROOK) -> 2,
    Hand(WHITE, BISHOP) -> 2,
    Hand(WHITE, GOLD) -> 4,
    Hand(WHITE, SILVER) -> 4,
    Hand(WHITE, KNIGHT) -> 4,
    Hand(WHITE, LANCE) -> 4,
    Hand(WHITE, PAWN) -> 18
  ),
    Some(StateHint(0x3e1d865304a55c2L, BitBoard(0x10L, 0x0L), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L),BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L,0x0L)), Map(KING -> 1, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L)))))
  )

  lazy val MATING_WHITE = State(WHITE, Map(
    Square(5, 9) -> Piece(BLACK, KING)
  ), EMPTY_HANDS ++ Map(
    Hand(BLACK, ROOK) -> 2,
    Hand(BLACK, BISHOP) -> 2,
    Hand(BLACK, GOLD) -> 4,
    Hand(BLACK, SILVER) -> 4,
    Hand(BLACK, KNIGHT) -> 4,
    Hand(BLACK, LANCE) -> 4,
    Hand(BLACK, PAWN) -> 18
  ),
    Some(StateHint(0xa393333d2cc1bb55L, BitBoard(0x0L, 0x400000L), Vector(BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 1, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(76) -> BitBoard(0x0L, 0xa07000L)), WHITE -> Map())))
  )

  lazy val HANDICAP_LANCE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    Square(2, 2) -> Piece(WHITE, BISHOP),
    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xd1c7d878dfb2ad78L, BitBoard(0x7fd05feL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fd05feL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x100L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x400L, 0x0L), BitBoard(0x10000L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 1, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80)-> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(10) -> BitBoard(0x140005L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(16) -> BitBoard(0x202fc80L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_LANCE_RIGHT = State(WHITE, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    Square(2, 2) -> Piece(WHITE, BISHOP),
    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xeb77206d763f5171L, BitBoard(0x7fd04ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fd04ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x1L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x400L, 0x0L), BitBoard(0x10000L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 1, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(10) -> BitBoard(0x140005L, 0x0L), Square(0) -> BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) ->BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(16) -> BitBoard(0x202fc80L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_BISHOP = State(WHITE, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xdf721a00538b0f8eL, BitBoard(0x7fd01ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fd01ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x101L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10000L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 0, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(0) -> BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(16) -> BitBoard(0x202fe80L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_ROOK = State(WHITE, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0x9c99f4d2a75c544cL, BitBoard(0x7fc05ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc05ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x101L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x400L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L,0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(10) -> BitBoard(0x140005L, 0x0L), Square(0) -> BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L,0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_ROOK_LANCE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xc53addcac4b488c3L, BitBoard(0x7fc05feL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc05feL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x100L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x400L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT -> 0, LANCE -> 1, PAWN -> 0, BISHOP -> 0), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L,0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(10) -> BitBoard(0x140005L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_2_PIECE = State(WHITE, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xcb8f1fb2488d2a35L, BitBoard(0x7fc01ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc01ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x101L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT -> 0, LANCE -> 0, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L),Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(0) -> BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(8) -> BitBoard(0x4020000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_3_PIECE = State(WHITE, Map(
    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xa89ccebf82e80ab3L, BitBoard(0x7fc00ffL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc00ffL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x1L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT ->0, LANCE -> 1, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(0) ->BitBoard(0x40200L, 0x0L), Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_4_PIECE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xf13fe7a7e100d63cL, BitBoard(0x7fc00feL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc00feL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x82L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT ->0, LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) ->BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_5_PIECE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    //    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xbfc6e4b66d76a3baL, BitBoard(0x7fc007eL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc007eL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x2L,0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT -> 1, LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(1) -> BitBoard(0x140000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_5_PIECE_LEFT = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xba907298687aedceL, BitBoard(0x7fc00fcL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc00fcL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x80L, 0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT ->1, LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) ->BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(7) -> BitBoard(0x5000000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_6_PIECE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 1) -> Piece(WHITE, KNIGHT),
    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    Square(7, 1) -> Piece(WHITE, SILVER),
    //    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xf4697189e40c9848L, BitBoard(0x7fc007cL, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc007cL, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L,0x0L), BitBoard(0x44L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 0, ROOK -> 1, KNIGHT -> 2, LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(6) -> BitBoard(0x1c000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(2) -> BitBoard(0x1c00L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_8_PIECE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 1) -> Piece(WHITE, KNIGHT),
    //    Square(3, 1) -> Piece(WHITE, SILVER),
    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    Square(6, 1) -> Piece(WHITE, GOLD),
    //    Square(7, 1) -> Piece(WHITE, SILVER),
    //    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xc9b2eed3af6001a3L, BitBoard(0x7fc0038L, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc0038L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x28L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 0, SILVER -> 2, ROOK -> 1, KNIGHT -> 2, LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(3) -> BitBoard(0x3814L, 0x0L), Square(5) -> BitBoard(0xe050L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_10_PIECE = State(WHITE, Map(
    //    Square(1, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 1) -> Piece(WHITE, KNIGHT),
    //    Square(3, 1) -> Piece(WHITE, SILVER),
    //    Square(4, 1) -> Piece(WHITE, GOLD),
    Square(5, 1) -> Piece(WHITE, KING),
    //    Square(6, 1) -> Piece(WHITE, GOLD),
    //    Square(7, 1) -> Piece(WHITE, SILVER),
    //    Square(8, 1) -> Piece(WHITE, KNIGHT),
    //    Square(9, 1) -> Piece(WHITE, LANCE),
    //    Square(2, 2) -> Piece(WHITE, BISHOP),
    //    Square(8, 2) -> Piece(WHITE, ROOK),
    Square(1, 3) -> Piece(WHITE, PAWN),
    Square(2, 3) -> Piece(WHITE, PAWN),
    Square(3, 3) -> Piece(WHITE, PAWN),
    Square(4, 3) -> Piece(WHITE, PAWN),
    Square(5, 3) -> Piece(WHITE, PAWN),
    Square(6, 3) -> Piece(WHITE, PAWN),
    Square(7, 3) -> Piece(WHITE, PAWN),
    Square(8, 3) -> Piece(WHITE, PAWN),
    Square(9, 3) -> Piece(WHITE, PAWN),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0x8258d1e97d76ca66L, BitBoard(0x7fc0010L, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x7fc0010L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L,0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x7fc0000L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 2, SILVER -> 2, ROOK -> 1, KNIGHT -> 2,LANCE -> 2, PAWN -> 0, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L), Square(24) -> BitBoard(0x200000000L, 0x0L), Square(20) -> BitBoard(0x20000000L, 0x0L), Square(19) -> BitBoard(0x10000000L, 0x0L), Square(23) -> BitBoard(0x100000000L, 0x0L), Square(21) -> BitBoard(0x40000000L, 0x0L), Square(18) -> BitBoard(0x8000000L, 0x0L), Square(26) -> BitBoard(0x800000000L, 0x0L), Square(25) -> BitBoard(0x400000000L, 0x0L), Square(22) -> BitBoard(0x80000000L, 0x0L)))))
  )

  lazy val HANDICAP_THREE_PAWNS = State(WHITE, Map(
    Square(5, 1) -> Piece(WHITE, KING),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS ++ Map(
    Hand(WHITE, PAWN) -> 3
  ),
    Some(StateHint(0xac2a027be55cd73bL, BitBoard(0x10L, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x10L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 2, SILVER -> 2, ROOK -> 1, KNIGHT -> 2, LANCE -> 2, PAWN -> 6, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L)))))
  )

  lazy val HANDICAP_NAKED_KING = State(WHITE, Map(
    Square(5, 1) -> Piece(WHITE, KING),
    Square(1, 7) -> Piece(BLACK, PAWN),
    Square(2, 7) -> Piece(BLACK, PAWN),
    Square(3, 7) -> Piece(BLACK, PAWN),
    Square(4, 7) -> Piece(BLACK, PAWN),
    Square(5, 7) -> Piece(BLACK, PAWN),
    Square(6, 7) -> Piece(BLACK, PAWN),
    Square(7, 7) -> Piece(BLACK, PAWN),
    Square(8, 7) -> Piece(BLACK, PAWN),
    Square(9, 7) -> Piece(BLACK, PAWN),
    Square(2, 8) -> Piece(BLACK, ROOK),
    Square(8, 8) -> Piece(BLACK, BISHOP),
    Square(1, 9) -> Piece(BLACK, LANCE),
    Square(2, 9) -> Piece(BLACK, KNIGHT),
    Square(3, 9) -> Piece(BLACK, SILVER),
    Square(4, 9) -> Piece(BLACK, GOLD),
    Square(5, 9) -> Piece(BLACK, KING),
    Square(6, 9) -> Piece(BLACK, GOLD),
    Square(7, 9) -> Piece(BLACK, SILVER),
    Square(8, 9) -> Piece(BLACK, KNIGHT),
    Square(9, 9) -> Piece(BLACK, LANCE)
  ), EMPTY_HANDS,
    Some(StateHint(0xe6fb2db30026423fL, BitBoard(0x10L, 0x7fd05ffL), Vector(BitBoard(0x0L, 0x7fd05ffL), BitBoard(0x10L, 0x0L)), Vector(BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x400000L), BitBoard(0x0L, 0xa00000L), BitBoard(0x0L, 0x1ffL), BitBoard(0x0L, 0x4040000L), BitBoard(0x0L, 0x2080000L), BitBoard(0x0L, 0x1100000L), BitBoard(0x0L, 0x10000L), BitBoard(0x0L, 0x400L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x10L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L), BitBoard(0x0L, 0x0L)), Map(KING -> 0, GOLD -> 2, SILVER -> 2, ROOK -> 1, KNIGHT -> 2, LANCE -> 2, PAWN -> 9, BISHOP -> 1), Map(BLACK -> Map(Square(61) -> BitBoard(0x10000000000000L, 0x0L), Square(73) -> BitBoard(0x0L, 0x5L), Square(60) -> BitBoard(0x8000000000000L, 0x0L), Square(62) -> BitBoard(0x20000000000000L, 0x0L), Square(55) -> BitBoard(0x400000000000L, 0x0L), Square(77) -> BitBoard(0x0L, 0x140e000L), Square(56) -> BitBoard(0x800000000000L, 0x0L), Square(59) -> BitBoard(0x4000000000000L, 0x0L), Square(58) -> BitBoard(0x2000000000000L, 0x0L), Square(78) -> BitBoard(0x0L, 0x1c000L), Square(64) -> BitBoard(0x0L, 0x9fa02L), Square(76) -> BitBoard(0x0L, 0xa07000L), Square(79) -> BitBoard(0x0L, 0x140L), Square(57) -> BitBoard(0x1000000000000L, 0x0L), Square(72) -> BitBoard(0x0L, 0x201L), Square(70) -> BitBoard(0x0L, 0x5000140L), Square(74) -> BitBoard(0x0L, 0x1c00L), Square(80) -> BitBoard(0x0L, 0x20100L), Square(54) -> BitBoard(0x200000000000L, 0x0L), Square(75) -> BitBoard(0x0L, 0x503800L)), WHITE -> Map(Square(4) -> BitBoard(0x7028L, 0x0L)))))
  )

}
